name: MoE Routing CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Lint with flake8
      run: |
        flake8 src/ tests/ --max-line-length=100 --ignore=E203,W503 --statistics
    
    - name: Type checking with mypy
      run: |
        mypy src/ --ignore-missing-imports --no-strict-optional
    
    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=term-missing
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v --tb=short -m "not slow"
    
    - name: Validate 4.72x improvement
      run: |
        pytest tests/unit/test_controller.py::TestProductionClarityController::test_validate_improvement -v
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  stress-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Run memory stress tests
      run: |
        pytest tests/stress/ -v --tb=short -m "memory" --timeout=300
        
    - name: Run performance tests
      run: |
        pytest tests/stress/ -v --tb=short -m "stress" --timeout=600

  api-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Start API server
      run: |
        uvicorn src.api.server:app --host 0.0.0.0 --port 8000 --workers 1 &
        sleep 10  # Wait for server to start
    
    - name: Test API endpoints
      run: |
        pytest tests/integration/test_api_integration.py -v --tb=short
    
    - name: Validate API improvement factor
      run: |
        curl -X POST http://localhost:8000/validate | jq '.validation_results.improvement_factor' | awk '{ if ($1 >= 4.0) exit 0; else exit 1 }'

  docker-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        docker build -f deployment/docker/Dockerfile -t moe-routing-test .
    
    - name: Test Docker container
      run: |
        docker run -d --name moe-test -p 8000:8000 moe-routing-test
        sleep 15  # Wait for container to start
        
        # Test health endpoint
        curl -f http://localhost:8000/health
        
        # Test improvement validation
        curl -X POST http://localhost:8000/validate | jq -e '.status == "PASSED"'
        
        # Cleanup
        docker stop moe-test
        docker rm moe-test

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Bandit security scan
      run: |
        pip install bandit
        bandit -r src/ -f json -o bandit-report.json || true
    
    - name: Run Safety scan
      run: |
        pip install safety
        safety check --json > safety-report.json || true
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  benchmark:
    runs-on: ubuntu-latest
    needs: [test, api-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Deploy system
      run: |
        chmod +x deployment/scripts/deploy.sh
        ./deployment/scripts/deploy.sh
    
    - name: Run benchmarks
      run: |
        chmod +x deployment/scripts/test.sh
        ./deployment/scripts/test.sh load 100
        ./deployment/scripts/test.sh stability
    
    - name: Performance regression check
      run: |
        # Ensure API can handle at least 20 RPS
        python -c "
import requests, time
start = time.time()
for i in range(100):
    requests.post('http://localhost:8000/route', 
                  json={'logits': [0.5, -0.2, 0.8, -0.5, 0.3], 'ambiguity_score': 0.5})
duration = time.time() - start
rps = 100 / duration
assert rps >= 20, f'Performance regression: {rps:.1f} RPS < 20 RPS'
print(f'Performance: {rps:.1f} RPS - PASSED')
"
    
    - name: Cleanup
      if: always()
      run: |
        ./deployment/scripts/deploy.sh clean || true

  release:
    runs-on: ubuntu-latest
    needs: [test, stress-test, api-test, docker-test, benchmark]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v1.0.${{ github.run_number }}
        release_name: MoE Routing v1.0.${{ github.run_number }}
        body: |
          ðŸŽ¯ **MoE Routing with 4.72Ã— Stability Improvement**
          
          ## Features
          - âœ… 4.72Ã— reduction in gating sensitivity validated
          - âœ… Production-ready API with monitoring
          - âœ… Multi-backend support (MLX, vLLM, Ollama)
          - âœ… Comprehensive test suite
          - âœ… Docker deployment ready
          
          ## Performance
          - Latency: p99 < 100ms
          - Throughput: 20+ RPS validated
          - Memory: < 50MB base footprint
          - Stability: Winner flip rate < 5%
          
          ## Validation Results
          All tests passed including:
          - Unit tests (coverage > 80%)
          - Integration tests
          - Stress/memory tests  
          - API functionality tests
          - Docker container tests
          - Performance benchmarks
        draft: false
        prerelease: false